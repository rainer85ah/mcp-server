name: Deploy to Environment

on:
  push:
    branches: [develop, staging, uat, main]

jobs:
  deploy:
    name: Deploy to ${{ matrix.env }} environment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - branch: develop
            env: dev
            cluster: mcp-dev-cluster
            role: AWS_DEV_ROLE_ARN
            tfvars: env/dev/terraform.tfvars
            backend: env/dev/backend.tfvars

          - branch: staging
            env: stag
            cluster: mcp-stag-cluster
            role: AWS_STAG_ROLE_ARN
            tfvars: env/stag/terraform.tfvars
            backend: env/stag/backend.tfvars

          - branch: uat
            env: uat
            cluster: mcp-uat-cluster
            role: AWS_UAT_ROLE_ARN
            tfvars: env/uat/terraform.tfvars
            backend: env/uat/backend.tfvars

          - branch: main
            env: prod
            cluster: mcp-prod-cluster
            role: AWS_PROD_ROLE_ARN
            tfvars: env/prod/terraform.tfvars
            backend: env/prod/backend.tfvars

    if: github.ref == 'refs/heads/' + matrix.branch
    environment: ${{ matrix.env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[matrix.role] }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        working-directory: ./infra
        run: |
          terraform init -backend-config="${{ matrix.backend }}"
          terraform workspace select ${{ matrix.env }} || terraform workspace new ${{ matrix.env }}
          terraform apply -var-file="${{ matrix.tfvars }}" -auto-approve

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ matrix.cluster }} \
            --service mcp-service \
            --force-new-deployment
